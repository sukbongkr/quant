[
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "get_business_date",
        "importPath": "ticker",
        "description": "ticker",
        "isExtraImport": true,
        "detail": "ticker",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "relativedelta",
        "importPath": "dateutil.relativedelta",
        "description": "dateutil.relativedelta",
        "isExtraImport": true,
        "detail": "dateutil.relativedelta",
        "documentation": {}
    },
    {
        "label": "bt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bt",
        "description": "bt",
        "detail": "bt",
        "documentation": {}
    },
    {
        "label": "stock",
        "importPath": "pykrx",
        "description": "pykrx",
        "isExtraImport": true,
        "detail": "pykrx",
        "documentation": {}
    },
    {
        "label": "stock",
        "importPath": "pykrx",
        "description": "pykrx",
        "isExtraImport": true,
        "detail": "pykrx",
        "documentation": {}
    },
    {
        "label": "stock",
        "importPath": "pykrx",
        "description": "pykrx",
        "isExtraImport": true,
        "detail": "pykrx",
        "documentation": {}
    },
    {
        "label": "concurrent.futures",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "get_business_date",
        "kind": 2,
        "importPath": "book.ticker",
        "description": "book.ticker",
        "peekOfCode": "def get_business_date():\n    url = 'https://finance.naver.com/sise/sise_deposit.nhn'\n    data = rq.get(url)\n    data_html = bs(data.content, features=\"lxml\")\n    parse_day = data_html.select_one('div.subtop_sise_graph2 >ul.subtop_chart_note > li > span.tah').text\n    busy_day = re.findall('[0-9]+', parse_day)\n    busy_day = ''.join(busy_day)\n    return busy_day\ndef get_kor_ticker():\n    gen_otp_url = 'http://data.krx.co.kr/comm/fileDn/GenerateOTP/generate.cmd'",
        "detail": "book.ticker",
        "documentation": {}
    },
    {
        "label": "get_kor_ticker",
        "kind": 2,
        "importPath": "book.ticker",
        "description": "book.ticker",
        "peekOfCode": "def get_kor_ticker():\n    gen_otp_url = 'http://data.krx.co.kr/comm/fileDn/GenerateOTP/generate.cmd'\n    gen_otp_stk = {\n        'mktId': 'STK',\n        'trdDd': get_business_date(),\n        'money': '1',\n        'csvxls_isNo': 'false',\n        'name': 'fileDown',\n        'url': 'dbms/MDC/STAT/standard/MDCSTAT03901'\n    }",
        "detail": "book.ticker",
        "documentation": {}
    },
    {
        "label": "con",
        "kind": 5,
        "importPath": "book.ticker",
        "description": "book.ticker",
        "peekOfCode": "con = sqlite3.connect('stock_db.sqlite3')\nmycursor = con.cursor()\ncreate_table_query = \"\"\"\nCREATE TABLE IF NOT EXISTS kor_ticker\n(\n    종목코드 TEXT NOT NULL,\n    종목명 TEXT,\n    시장구분 TEXT,\n    종가 REAL,\n    시가총액 REAL,",
        "detail": "book.ticker",
        "documentation": {}
    },
    {
        "label": "mycursor",
        "kind": 5,
        "importPath": "book.ticker",
        "description": "book.ticker",
        "peekOfCode": "mycursor = con.cursor()\ncreate_table_query = \"\"\"\nCREATE TABLE IF NOT EXISTS kor_ticker\n(\n    종목코드 TEXT NOT NULL,\n    종목명 TEXT,\n    시장구분 TEXT,\n    종가 REAL,\n    시가총액 REAL,\n    기준일 TEXT,",
        "detail": "book.ticker",
        "documentation": {}
    },
    {
        "label": "create_table_query",
        "kind": 5,
        "importPath": "book.ticker",
        "description": "book.ticker",
        "peekOfCode": "create_table_query = \"\"\"\nCREATE TABLE IF NOT EXISTS kor_ticker\n(\n    종목코드 TEXT NOT NULL,\n    종목명 TEXT,\n    시장구분 TEXT,\n    종가 REAL,\n    시가총액 REAL,\n    기준일 TEXT,\n    EPS REAL,",
        "detail": "book.ticker",
        "documentation": {}
    },
    {
        "label": "query",
        "kind": 5,
        "importPath": "book.ticker",
        "description": "book.ticker",
        "peekOfCode": "query = f\"\"\"\n    INSERT OR REPLACE INTO kor_ticker (종목코드,종목명,시장구분,종가,시가총액,기준일,EPS,선행EPS,BPS,주당배당금,종목구분)\n    VALUES (?,?,?,?,?,?,?,?,?,?,?);\n\"\"\"\nkor_ticker = get_kor_ticker()\nargs = kor_ticker.astype({'시가총액': float}).values.tolist()\nmycursor.executemany(query, args)\ncon.commit()\ncon.close()",
        "detail": "book.ticker",
        "documentation": {}
    },
    {
        "label": "kor_ticker",
        "kind": 5,
        "importPath": "book.ticker",
        "description": "book.ticker",
        "peekOfCode": "kor_ticker = get_kor_ticker()\nargs = kor_ticker.astype({'시가총액': float}).values.tolist()\nmycursor.executemany(query, args)\ncon.commit()\ncon.close()",
        "detail": "book.ticker",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "book.ticker",
        "description": "book.ticker",
        "peekOfCode": "args = kor_ticker.astype({'시가총액': float}).values.tolist()\nmycursor.executemany(query, args)\ncon.commit()\ncon.close()",
        "detail": "book.ticker",
        "documentation": {}
    },
    {
        "label": "sector_code",
        "kind": 5,
        "importPath": "book.wics",
        "description": "book.wics",
        "peekOfCode": "sector_code = [\n    'G25', 'G35', 'G50', 'G40', 'G10', 'G20', 'G55', 'G30', 'G15', 'G45'\n]\ndata_sector = []\nfor i in tqdm(sector_code):\n    url = f'''http://www.wiseindex.com/Index/GetIndexComponets?ceil_yn=0&dt={get_business_date()}&sec_cd={i}'''    \n    data = rq.get(url).json()\n    data_pd = pd.json_normalize(data['list'])\n    data_sector.append(data_pd)\n    time.sleep(2)",
        "detail": "book.wics",
        "documentation": {}
    },
    {
        "label": "data_sector",
        "kind": 5,
        "importPath": "book.wics",
        "description": "book.wics",
        "peekOfCode": "data_sector = []\nfor i in tqdm(sector_code):\n    url = f'''http://www.wiseindex.com/Index/GetIndexComponets?ceil_yn=0&dt={get_business_date()}&sec_cd={i}'''    \n    data = rq.get(url).json()\n    data_pd = pd.json_normalize(data['list'])\n    data_sector.append(data_pd)\n    time.sleep(2)\nkor_sector = pd.concat(data_sector, axis = 0)\nkor_sector = kor_sector[['IDX_CD', 'CMP_CD', 'CMP_KOR', 'SEC_NM_KOR']]\nkor_sector['기준일'] = get_business_date()",
        "detail": "book.wics",
        "documentation": {}
    },
    {
        "label": "kor_sector",
        "kind": 5,
        "importPath": "book.wics",
        "description": "book.wics",
        "peekOfCode": "kor_sector = pd.concat(data_sector, axis = 0)\nkor_sector = kor_sector[['IDX_CD', 'CMP_CD', 'CMP_KOR', 'SEC_NM_KOR']]\nkor_sector['기준일'] = get_business_date()\nkor_sector['기준일'] = pd.to_datetime(kor_sector['기준일'])\nkor_sector['기준일'] = kor_sector['기준일'].astype(str)\nimport sqlite3\ncon = sqlite3.connect('stock_db.sqlite3')\nmycursor = con.cursor()\ncreate_table_query = \"\"\"\nCREATE TABLE IF NOT EXISTS kor_sector",
        "detail": "book.wics",
        "documentation": {}
    },
    {
        "label": "kor_sector",
        "kind": 5,
        "importPath": "book.wics",
        "description": "book.wics",
        "peekOfCode": "kor_sector = kor_sector[['IDX_CD', 'CMP_CD', 'CMP_KOR', 'SEC_NM_KOR']]\nkor_sector['기준일'] = get_business_date()\nkor_sector['기준일'] = pd.to_datetime(kor_sector['기준일'])\nkor_sector['기준일'] = kor_sector['기준일'].astype(str)\nimport sqlite3\ncon = sqlite3.connect('stock_db.sqlite3')\nmycursor = con.cursor()\ncreate_table_query = \"\"\"\nCREATE TABLE IF NOT EXISTS kor_sector\n(",
        "detail": "book.wics",
        "documentation": {}
    },
    {
        "label": "kor_sector['기준일']",
        "kind": 5,
        "importPath": "book.wics",
        "description": "book.wics",
        "peekOfCode": "kor_sector['기준일'] = get_business_date()\nkor_sector['기준일'] = pd.to_datetime(kor_sector['기준일'])\nkor_sector['기준일'] = kor_sector['기준일'].astype(str)\nimport sqlite3\ncon = sqlite3.connect('stock_db.sqlite3')\nmycursor = con.cursor()\ncreate_table_query = \"\"\"\nCREATE TABLE IF NOT EXISTS kor_sector\n(\n    IDX_CD TEXT NOT NULL,",
        "detail": "book.wics",
        "documentation": {}
    },
    {
        "label": "kor_sector['기준일']",
        "kind": 5,
        "importPath": "book.wics",
        "description": "book.wics",
        "peekOfCode": "kor_sector['기준일'] = pd.to_datetime(kor_sector['기준일'])\nkor_sector['기준일'] = kor_sector['기준일'].astype(str)\nimport sqlite3\ncon = sqlite3.connect('stock_db.sqlite3')\nmycursor = con.cursor()\ncreate_table_query = \"\"\"\nCREATE TABLE IF NOT EXISTS kor_sector\n(\n    IDX_CD TEXT NOT NULL,\n    CMP_CD TEXT NOT NULL,",
        "detail": "book.wics",
        "documentation": {}
    },
    {
        "label": "kor_sector['기준일']",
        "kind": 5,
        "importPath": "book.wics",
        "description": "book.wics",
        "peekOfCode": "kor_sector['기준일'] = kor_sector['기준일'].astype(str)\nimport sqlite3\ncon = sqlite3.connect('stock_db.sqlite3')\nmycursor = con.cursor()\ncreate_table_query = \"\"\"\nCREATE TABLE IF NOT EXISTS kor_sector\n(\n    IDX_CD TEXT NOT NULL,\n    CMP_CD TEXT NOT NULL,\n    CMP_KOR TEXT,",
        "detail": "book.wics",
        "documentation": {}
    },
    {
        "label": "con",
        "kind": 5,
        "importPath": "book.wics",
        "description": "book.wics",
        "peekOfCode": "con = sqlite3.connect('stock_db.sqlite3')\nmycursor = con.cursor()\ncreate_table_query = \"\"\"\nCREATE TABLE IF NOT EXISTS kor_sector\n(\n    IDX_CD TEXT NOT NULL,\n    CMP_CD TEXT NOT NULL,\n    CMP_KOR TEXT,\n    SEC_NM_KOR TEXT,\n    기준일 TEXT,",
        "detail": "book.wics",
        "documentation": {}
    },
    {
        "label": "mycursor",
        "kind": 5,
        "importPath": "book.wics",
        "description": "book.wics",
        "peekOfCode": "mycursor = con.cursor()\ncreate_table_query = \"\"\"\nCREATE TABLE IF NOT EXISTS kor_sector\n(\n    IDX_CD TEXT NOT NULL,\n    CMP_CD TEXT NOT NULL,\n    CMP_KOR TEXT,\n    SEC_NM_KOR TEXT,\n    기준일 TEXT,\n    PRIMARY KEY(CMP_CD, 기준일)",
        "detail": "book.wics",
        "documentation": {}
    },
    {
        "label": "create_table_query",
        "kind": 5,
        "importPath": "book.wics",
        "description": "book.wics",
        "peekOfCode": "create_table_query = \"\"\"\nCREATE TABLE IF NOT EXISTS kor_sector\n(\n    IDX_CD TEXT NOT NULL,\n    CMP_CD TEXT NOT NULL,\n    CMP_KOR TEXT,\n    SEC_NM_KOR TEXT,\n    기준일 TEXT,\n    PRIMARY KEY(CMP_CD, 기준일)\n);",
        "detail": "book.wics",
        "documentation": {}
    },
    {
        "label": "query",
        "kind": 5,
        "importPath": "book.wics",
        "description": "book.wics",
        "peekOfCode": "query = f\"\"\"\n    INSERT OR REPLACE INTO kor_sector (IDX_CD, CMP_CD, CMP_KOR, SEC_NM_KOR, 기준일)\n    VALUES (?,?,?,?,?);\n\"\"\"\nargs = kor_sector.values.tolist()\nmycursor.executemany(query, args)\ncon.commit()\ncon.close()",
        "detail": "book.wics",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "book.wics",
        "description": "book.wics",
        "peekOfCode": "args = kor_sector.values.tolist()\nmycursor.executemany(query, args)\ncon.commit()\ncon.close()",
        "detail": "book.wics",
        "documentation": {}
    },
    {
        "label": "con",
        "kind": 5,
        "importPath": "book.수정주가",
        "description": "book.수정주가",
        "peekOfCode": "con = sqlite3.connect('stock_db.sqlite3')\nmycursor = con.cursor()\n# 티커리스트 불러오기\nticker_list = pd.read_sql(\"\"\"\nSELECT * FROM kor_ticker\nWHERE 기준일 = (SELECT MAX(기준일) FROM kor_ticker)\n    AND 종목구분 = '보통주';\n\"\"\", con=con)\n# DB 저장 쿼리\nquery = \"\"\"",
        "detail": "book.수정주가",
        "documentation": {}
    },
    {
        "label": "mycursor",
        "kind": 5,
        "importPath": "book.수정주가",
        "description": "book.수정주가",
        "peekOfCode": "mycursor = con.cursor()\n# 티커리스트 불러오기\nticker_list = pd.read_sql(\"\"\"\nSELECT * FROM kor_ticker\nWHERE 기준일 = (SELECT MAX(기준일) FROM kor_ticker)\n    AND 종목구분 = '보통주';\n\"\"\", con=con)\n# DB 저장 쿼리\nquery = \"\"\"\n    INSERT OR REPLACE INTO kor_price (날짜, 시가, 고가, 저가, 종가, 거래량, 종목코드)",
        "detail": "book.수정주가",
        "documentation": {}
    },
    {
        "label": "ticker_list",
        "kind": 5,
        "importPath": "book.수정주가",
        "description": "book.수정주가",
        "peekOfCode": "ticker_list = pd.read_sql(\"\"\"\nSELECT * FROM kor_ticker\nWHERE 기준일 = (SELECT MAX(기준일) FROM kor_ticker)\n    AND 종목구분 = '보통주';\n\"\"\", con=con)\n# DB 저장 쿼리\nquery = \"\"\"\n    INSERT OR REPLACE INTO kor_price (날짜, 시가, 고가, 저가, 종가, 거래량, 종목코드)\n    VALUES (?, ?, ?, ?, ?, ?, ?);\n\"\"\"",
        "detail": "book.수정주가",
        "documentation": {}
    },
    {
        "label": "query",
        "kind": 5,
        "importPath": "book.수정주가",
        "description": "book.수정주가",
        "peekOfCode": "query = \"\"\"\n    INSERT OR REPLACE INTO kor_price (날짜, 시가, 고가, 저가, 종가, 거래량, 종목코드)\n    VALUES (?, ?, ?, ?, ?, ?, ?);\n\"\"\"\n# 오류 발생시 저장할 리스트 생성\nerror_list = []\n# 전종목 주가 다운로드 및 저장\nfor i in tqdm(range(0, len(ticker_list))):\n    # 티커 선택\n    ticker = ticker_list['종목코드'][i]",
        "detail": "book.수정주가",
        "documentation": {}
    },
    {
        "label": "error_list",
        "kind": 5,
        "importPath": "book.수정주가",
        "description": "book.수정주가",
        "peekOfCode": "error_list = []\n# 전종목 주가 다운로드 및 저장\nfor i in tqdm(range(0, len(ticker_list))):\n    # 티커 선택\n    ticker = ticker_list['종목코드'][i]\n    # 시작일과 종료일\n    fr = (date.today() + relativedelta(years=-5)).strftime(\"%Y%m%d\")\n    to = (date.today()).strftime(\"%Y%m%d\")\n    # 오류 발생 시 이를 무시하고 다음 루프로 진행\n    try:",
        "detail": "book.수정주가",
        "documentation": {}
    },
    {
        "label": "get_stock",
        "kind": 2,
        "importPath": "a",
        "description": "a",
        "peekOfCode": "def get_stock(ticker):\n    #종목코드를 입력받아서 해당 종목의 데이터를 불러옴\n    cursor.execute(\"SELECT * FROM stock_data WHERE ticker = ?\", (ticker,))\n    rows = cursor.fetchall()\n    #row를 dataframe으로 변환\n    df = pd.DataFrame(rows, columns=['코드','이름','날짜', '시가', '고가', '저가', '종가', '거래량', '거래대금', '등락률', 'BPS', 'PER', 'PBR', 'EPS', 'DIV', 'DPS', '기관합계', '기타법인', '개인', '외국인합계', '전체', '시가총액', '거래량2', '거래대금2', '상장주식수', '상장주식수2', '보유수량', '지분율', '한도수량', '한도소진률'])\n    #df의 index를 날짜로 변경\n    df = df.set_index('날짜')\n    #날짜를 Date로 변경\n    df.index = pd.to_datetime(df.index)",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "a",
        "description": "a",
        "peekOfCode": "conn = sqlite3.connect('stock_data.db')\ncursor = conn.cursor()\ndef get_stock(ticker):\n    #종목코드를 입력받아서 해당 종목의 데이터를 불러옴\n    cursor.execute(\"SELECT * FROM stock_data WHERE ticker = ?\", (ticker,))\n    rows = cursor.fetchall()\n    #row를 dataframe으로 변환\n    df = pd.DataFrame(rows, columns=['코드','이름','날짜', '시가', '고가', '저가', '종가', '거래량', '거래대금', '등락률', 'BPS', 'PER', 'PBR', 'EPS', 'DIV', 'DPS', '기관합계', '기타법인', '개인', '외국인합계', '전체', '시가총액', '거래량2', '거래대금2', '상장주식수', '상장주식수2', '보유수량', '지분율', '한도수량', '한도소진률'])\n    #df의 index를 날짜로 변경\n    df = df.set_index('날짜')",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "a",
        "description": "a",
        "peekOfCode": "cursor = conn.cursor()\ndef get_stock(ticker):\n    #종목코드를 입력받아서 해당 종목의 데이터를 불러옴\n    cursor.execute(\"SELECT * FROM stock_data WHERE ticker = ?\", (ticker,))\n    rows = cursor.fetchall()\n    #row를 dataframe으로 변환\n    df = pd.DataFrame(rows, columns=['코드','이름','날짜', '시가', '고가', '저가', '종가', '거래량', '거래대금', '등락률', 'BPS', 'PER', 'PBR', 'EPS', 'DIV', 'DPS', '기관합계', '기타법인', '개인', '외국인합계', '전체', '시가총액', '거래량2', '거래대금2', '상장주식수', '상장주식수2', '보유수량', '지분율', '한도수량', '한도소진률'])\n    #df의 index를 날짜로 변경\n    df = df.set_index('날짜')\n    #날짜를 Date로 변경",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "backtest",
        "description": "backtest",
        "peekOfCode": "conn = sqlite3.connect('stock_data.db')\ncursor = conn.cursor()\n#종목코드를 입력받아서 해당 종목의 데이터를 불러옴\nticker = '005930'\n#종목코드를 입력받아서 해당 종목의 데이터를 불러옴\ncursor.execute(\"SELECT * FROM stock_data WHERE ticker = ?\", (ticker,))\nrows = cursor.fetchall()\n#row를 dataframe으로 변환\ndf = pd.DataFrame(rows, columns=['코드','이름','날짜', '시가', '고가', '저가', '종가', '거래량', '거래대금', '등락률', 'BPS', 'PER', 'PBR', 'EPS', 'DIV', 'DPS', '기관합계', '기타법인', '개인', '외국인합계', '전체', '시가총액', '거래량2', '거래대금2', '상장주식수', '상장주식수2', '보유수량', '지분율', '한도수량', '한도소진률'])\nprint(df)",
        "detail": "backtest",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "backtest",
        "description": "backtest",
        "peekOfCode": "cursor = conn.cursor()\n#종목코드를 입력받아서 해당 종목의 데이터를 불러옴\nticker = '005930'\n#종목코드를 입력받아서 해당 종목의 데이터를 불러옴\ncursor.execute(\"SELECT * FROM stock_data WHERE ticker = ?\", (ticker,))\nrows = cursor.fetchall()\n#row를 dataframe으로 변환\ndf = pd.DataFrame(rows, columns=['코드','이름','날짜', '시가', '고가', '저가', '종가', '거래량', '거래대금', '등락률', 'BPS', 'PER', 'PBR', 'EPS', 'DIV', 'DPS', '기관합계', '기타법인', '개인', '외국인합계', '전체', '시가총액', '거래량2', '거래대금2', '상장주식수', '상장주식수2', '보유수량', '지분율', '한도수량', '한도소진률'])\nprint(df)",
        "detail": "backtest",
        "documentation": {}
    },
    {
        "label": "ticker",
        "kind": 5,
        "importPath": "backtest",
        "description": "backtest",
        "peekOfCode": "ticker = '005930'\n#종목코드를 입력받아서 해당 종목의 데이터를 불러옴\ncursor.execute(\"SELECT * FROM stock_data WHERE ticker = ?\", (ticker,))\nrows = cursor.fetchall()\n#row를 dataframe으로 변환\ndf = pd.DataFrame(rows, columns=['코드','이름','날짜', '시가', '고가', '저가', '종가', '거래량', '거래대금', '등락률', 'BPS', 'PER', 'PBR', 'EPS', 'DIV', 'DPS', '기관합계', '기타법인', '개인', '외국인합계', '전체', '시가총액', '거래량2', '거래대금2', '상장주식수', '상장주식수2', '보유수량', '지분율', '한도수량', '한도소진률'])\nprint(df)",
        "detail": "backtest",
        "documentation": {}
    },
    {
        "label": "rows",
        "kind": 5,
        "importPath": "backtest",
        "description": "backtest",
        "peekOfCode": "rows = cursor.fetchall()\n#row를 dataframe으로 변환\ndf = pd.DataFrame(rows, columns=['코드','이름','날짜', '시가', '고가', '저가', '종가', '거래량', '거래대금', '등락률', 'BPS', 'PER', 'PBR', 'EPS', 'DIV', 'DPS', '기관합계', '기타법인', '개인', '외국인합계', '전체', '시가총액', '거래량2', '거래대금2', '상장주식수', '상장주식수2', '보유수량', '지분율', '한도수량', '한도소진률'])\nprint(df)",
        "detail": "backtest",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "backtest",
        "description": "backtest",
        "peekOfCode": "df = pd.DataFrame(rows, columns=['코드','이름','날짜', '시가', '고가', '저가', '종가', '거래량', '거래대금', '등락률', 'BPS', 'PER', 'PBR', 'EPS', 'DIV', 'DPS', '기관합계', '기타법인', '개인', '외국인합계', '전체', '시가총액', '거래량2', '거래대금2', '상장주식수', '상장주식수2', '보유수량', '지분율', '한도수량', '한도소진률'])\nprint(df)",
        "detail": "backtest",
        "documentation": {}
    },
    {
        "label": "tickers",
        "kind": 5,
        "importPath": "collector",
        "description": "collector",
        "peekOfCode": "tickers = stock.get_market_ticker_list(market=\"ALL\")\nend_date = datetime.datetime.now().strftime(\"%Y%m%d\")\n# Create a SQLite connection and create the table if not exists\nconn = sqlite3.connect('stock_data.db')\ncursor = conn.cursor()\ncursor.execute('''CREATE TABLE IF NOT EXISTS stock_data\n                 (ticker TEXT,이름 TEXT, 날짜 TEXT, 시가 REAL, 고가 REAL, 저가 REAL, 종가 REAL, 거래량 REAL, 거래대금 REAL, 등락률 REAL, BPS REAL, PER REAL, PBR REAL, EPS REAL, DIV REAL, DPS REAL, 기관합계 REAL, 기타법인 REAL, 개인 REAL, 외국인합계 REAL, 전체 REAL, 시가총액 REAL, 거래량2 REAL, 거래대금2 REAL, 상장주식수 REAL, 상장주식수2 REAL, 보유수량 REAL, 지분율 REAL, 한도수량 REAL, 한도소진률 REAL)''')\n# start_date 는 db에 저장된 마지막 날짜에서 다음날로 설정\nstart_date = cursor.execute(\"SELECT 날짜 FROM stock_data ORDER BY 날짜 DESC LIMIT 1\").fetchone()\nprint(start_date)",
        "detail": "collector",
        "documentation": {}
    },
    {
        "label": "end_date",
        "kind": 5,
        "importPath": "collector",
        "description": "collector",
        "peekOfCode": "end_date = datetime.datetime.now().strftime(\"%Y%m%d\")\n# Create a SQLite connection and create the table if not exists\nconn = sqlite3.connect('stock_data.db')\ncursor = conn.cursor()\ncursor.execute('''CREATE TABLE IF NOT EXISTS stock_data\n                 (ticker TEXT,이름 TEXT, 날짜 TEXT, 시가 REAL, 고가 REAL, 저가 REAL, 종가 REAL, 거래량 REAL, 거래대금 REAL, 등락률 REAL, BPS REAL, PER REAL, PBR REAL, EPS REAL, DIV REAL, DPS REAL, 기관합계 REAL, 기타법인 REAL, 개인 REAL, 외국인합계 REAL, 전체 REAL, 시가총액 REAL, 거래량2 REAL, 거래대금2 REAL, 상장주식수 REAL, 상장주식수2 REAL, 보유수량 REAL, 지분율 REAL, 한도수량 REAL, 한도소진률 REAL)''')\n# start_date 는 db에 저장된 마지막 날짜에서 다음날로 설정\nstart_date = cursor.execute(\"SELECT 날짜 FROM stock_data ORDER BY 날짜 DESC LIMIT 1\").fetchone()\nprint(start_date)\n# 만일 db에 날짜정보가 없다면 1956년 3월 3일로 설정",
        "detail": "collector",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "collector",
        "description": "collector",
        "peekOfCode": "conn = sqlite3.connect('stock_data.db')\ncursor = conn.cursor()\ncursor.execute('''CREATE TABLE IF NOT EXISTS stock_data\n                 (ticker TEXT,이름 TEXT, 날짜 TEXT, 시가 REAL, 고가 REAL, 저가 REAL, 종가 REAL, 거래량 REAL, 거래대금 REAL, 등락률 REAL, BPS REAL, PER REAL, PBR REAL, EPS REAL, DIV REAL, DPS REAL, 기관합계 REAL, 기타법인 REAL, 개인 REAL, 외국인합계 REAL, 전체 REAL, 시가총액 REAL, 거래량2 REAL, 거래대금2 REAL, 상장주식수 REAL, 상장주식수2 REAL, 보유수량 REAL, 지분율 REAL, 한도수량 REAL, 한도소진률 REAL)''')\n# start_date 는 db에 저장된 마지막 날짜에서 다음날로 설정\nstart_date = cursor.execute(\"SELECT 날짜 FROM stock_data ORDER BY 날짜 DESC LIMIT 1\").fetchone()\nprint(start_date)\n# 만일 db에 날짜정보가 없다면 1956년 3월 3일로 설정\nif start_date is None:\n    start_date = \"19560303\"",
        "detail": "collector",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "collector",
        "description": "collector",
        "peekOfCode": "cursor = conn.cursor()\ncursor.execute('''CREATE TABLE IF NOT EXISTS stock_data\n                 (ticker TEXT,이름 TEXT, 날짜 TEXT, 시가 REAL, 고가 REAL, 저가 REAL, 종가 REAL, 거래량 REAL, 거래대금 REAL, 등락률 REAL, BPS REAL, PER REAL, PBR REAL, EPS REAL, DIV REAL, DPS REAL, 기관합계 REAL, 기타법인 REAL, 개인 REAL, 외국인합계 REAL, 전체 REAL, 시가총액 REAL, 거래량2 REAL, 거래대금2 REAL, 상장주식수 REAL, 상장주식수2 REAL, 보유수량 REAL, 지분율 REAL, 한도수량 REAL, 한도소진률 REAL)''')\n# start_date 는 db에 저장된 마지막 날짜에서 다음날로 설정\nstart_date = cursor.execute(\"SELECT 날짜 FROM stock_data ORDER BY 날짜 DESC LIMIT 1\").fetchone()\nprint(start_date)\n# 만일 db에 날짜정보가 없다면 1956년 3월 3일로 설정\nif start_date is None:\n    start_date = \"19560303\"\nerror_list = {}",
        "detail": "collector",
        "documentation": {}
    },
    {
        "label": "start_date",
        "kind": 5,
        "importPath": "collector",
        "description": "collector",
        "peekOfCode": "start_date = cursor.execute(\"SELECT 날짜 FROM stock_data ORDER BY 날짜 DESC LIMIT 1\").fetchone()\nprint(start_date)\n# 만일 db에 날짜정보가 없다면 1956년 3월 3일로 설정\nif start_date is None:\n    start_date = \"19560303\"\nerror_list = {}\nbar = tqdm(tickers)\nfor ticker in bar:\n    try:\n        price = stock.get_market_ohlcv_by_date(start_date, end_date, ticker)",
        "detail": "collector",
        "documentation": {}
    },
    {
        "label": "error_list",
        "kind": 5,
        "importPath": "collector",
        "description": "collector",
        "peekOfCode": "error_list = {}\nbar = tqdm(tickers)\nfor ticker in bar:\n    try:\n        price = stock.get_market_ohlcv_by_date(start_date, end_date, ticker)\n        value = stock.get_market_fundamental(start_date, end_date, ticker)\n        trading = stock.get_market_trading_value_by_date(start_date, end_date, ticker)\n        totalprice = stock.get_market_cap(start_date, end_date, ticker)\n        foreign = stock.get_exhaustion_rates_of_foreign_investment(start_date, end_date, ticker)\n        #value가 비어있을 경우 빈 데이터프레임 생성",
        "detail": "collector",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 5,
        "importPath": "collector",
        "description": "collector",
        "peekOfCode": "bar = tqdm(tickers)\nfor ticker in bar:\n    try:\n        price = stock.get_market_ohlcv_by_date(start_date, end_date, ticker)\n        value = stock.get_market_fundamental(start_date, end_date, ticker)\n        trading = stock.get_market_trading_value_by_date(start_date, end_date, ticker)\n        totalprice = stock.get_market_cap(start_date, end_date, ticker)\n        foreign = stock.get_exhaustion_rates_of_foreign_investment(start_date, end_date, ticker)\n        #value가 비어있을 경우 빈 데이터프레임 생성\n        if value.empty:",
        "detail": "collector",
        "documentation": {}
    },
    {
        "label": "process_ticker",
        "kind": 2,
        "importPath": "collector_multi",
        "description": "collector_multi",
        "peekOfCode": "def process_ticker(ticker, start_date, end_date):\n    try:\n        price = stock.get_market_ohlcv_by_date(start_date, end_date, ticker)\n        value = stock.get_market_fundamental(start_date, end_date, ticker)\n        trading = stock.get_market_trading_value_by_date(start_date, end_date, ticker)\n        totalprice = stock.get_market_cap(start_date, end_date, ticker)\n        foreign = stock.get_exhaustion_rates_of_foreign_investment(start_date, end_date, ticker)\n        if value.empty:\n            value = pd.DataFrame(columns=['BPS', 'PER', 'PBR', 'EPS', 'DIV', 'DPS'])\n        df = pd.concat([price, value, trading, totalprice, foreign], axis=1)",
        "detail": "collector_multi",
        "documentation": {}
    },
    {
        "label": "tickers",
        "kind": 5,
        "importPath": "collector_multi",
        "description": "collector_multi",
        "peekOfCode": "tickers = stock.get_market_ticker_list(market=\"ALL\")\nend_date = datetime.datetime.now().strftime(\"%Y%m%d\")\nconn = sqlite3.connect('stock_data.db')\ncursor = conn.cursor()\ncursor.execute('''CREATE TABLE IF NOT EXISTS stock_data\n                 (ticker TEXT, 이름 TEXT, 날짜 TEXT, 시가 REAL, 고가 REAL, 저가 REAL, 종가 REAL, 거래량 REAL, 거래대금 REAL, 등락률 REAL, BPS REAL, PER REAL, PBR REAL, EPS REAL, DIV REAL, DPS REAL, 기관합계 REAL, 기타법인 REAL, 개인 REAL, 외국인합계 REAL, 전체 REAL, 시가총액 REAL, 거래량2 REAL, 거래대금2 REAL, 상장주식수 REAL, 상장주식수2 REAL, 보유수량 REAL, 지분율 REAL, 한도수량 REAL, 한도소진률 REAL)''')\nstart_date = cursor.execute(\"SELECT 날짜 FROM stock_data ORDER BY 날짜 DESC LIMIT 1\").fetchone()\nif start_date is None:\n    start_date = \"19560303\"\nwith concurrent.futures.ThreadPoolExecutor() as executor:",
        "detail": "collector_multi",
        "documentation": {}
    },
    {
        "label": "end_date",
        "kind": 5,
        "importPath": "collector_multi",
        "description": "collector_multi",
        "peekOfCode": "end_date = datetime.datetime.now().strftime(\"%Y%m%d\")\nconn = sqlite3.connect('stock_data.db')\ncursor = conn.cursor()\ncursor.execute('''CREATE TABLE IF NOT EXISTS stock_data\n                 (ticker TEXT, 이름 TEXT, 날짜 TEXT, 시가 REAL, 고가 REAL, 저가 REAL, 종가 REAL, 거래량 REAL, 거래대금 REAL, 등락률 REAL, BPS REAL, PER REAL, PBR REAL, EPS REAL, DIV REAL, DPS REAL, 기관합계 REAL, 기타법인 REAL, 개인 REAL, 외국인합계 REAL, 전체 REAL, 시가총액 REAL, 거래량2 REAL, 거래대금2 REAL, 상장주식수 REAL, 상장주식수2 REAL, 보유수량 REAL, 지분율 REAL, 한도수량 REAL, 한도소진률 REAL)''')\nstart_date = cursor.execute(\"SELECT 날짜 FROM stock_data ORDER BY 날짜 DESC LIMIT 1\").fetchone()\nif start_date is None:\n    start_date = \"19560303\"\nwith concurrent.futures.ThreadPoolExecutor() as executor:\n    results = list(tqdm(executor.map(process_ticker, tickers, [start_date] * len(tickers), [end_date] * len(tickers)), total=len(tickers)))",
        "detail": "collector_multi",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "collector_multi",
        "description": "collector_multi",
        "peekOfCode": "conn = sqlite3.connect('stock_data.db')\ncursor = conn.cursor()\ncursor.execute('''CREATE TABLE IF NOT EXISTS stock_data\n                 (ticker TEXT, 이름 TEXT, 날짜 TEXT, 시가 REAL, 고가 REAL, 저가 REAL, 종가 REAL, 거래량 REAL, 거래대금 REAL, 등락률 REAL, BPS REAL, PER REAL, PBR REAL, EPS REAL, DIV REAL, DPS REAL, 기관합계 REAL, 기타법인 REAL, 개인 REAL, 외국인합계 REAL, 전체 REAL, 시가총액 REAL, 거래량2 REAL, 거래대금2 REAL, 상장주식수 REAL, 상장주식수2 REAL, 보유수량 REAL, 지분율 REAL, 한도수량 REAL, 한도소진률 REAL)''')\nstart_date = cursor.execute(\"SELECT 날짜 FROM stock_data ORDER BY 날짜 DESC LIMIT 1\").fetchone()\nif start_date is None:\n    start_date = \"19560303\"\nwith concurrent.futures.ThreadPoolExecutor() as executor:\n    results = list(tqdm(executor.map(process_ticker, tickers, [start_date] * len(tickers), [end_date] * len(tickers)), total=len(tickers)))\nfor df in results:",
        "detail": "collector_multi",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "collector_multi",
        "description": "collector_multi",
        "peekOfCode": "cursor = conn.cursor()\ncursor.execute('''CREATE TABLE IF NOT EXISTS stock_data\n                 (ticker TEXT, 이름 TEXT, 날짜 TEXT, 시가 REAL, 고가 REAL, 저가 REAL, 종가 REAL, 거래량 REAL, 거래대금 REAL, 등락률 REAL, BPS REAL, PER REAL, PBR REAL, EPS REAL, DIV REAL, DPS REAL, 기관합계 REAL, 기타법인 REAL, 개인 REAL, 외국인합계 REAL, 전체 REAL, 시가총액 REAL, 거래량2 REAL, 거래대금2 REAL, 상장주식수 REAL, 상장주식수2 REAL, 보유수량 REAL, 지분율 REAL, 한도수량 REAL, 한도소진률 REAL)''')\nstart_date = cursor.execute(\"SELECT 날짜 FROM stock_data ORDER BY 날짜 DESC LIMIT 1\").fetchone()\nif start_date is None:\n    start_date = \"19560303\"\nwith concurrent.futures.ThreadPoolExecutor() as executor:\n    results = list(tqdm(executor.map(process_ticker, tickers, [start_date] * len(tickers), [end_date] * len(tickers)), total=len(tickers)))\nfor df in results:\n    if df is not None:",
        "detail": "collector_multi",
        "documentation": {}
    },
    {
        "label": "start_date",
        "kind": 5,
        "importPath": "collector_multi",
        "description": "collector_multi",
        "peekOfCode": "start_date = cursor.execute(\"SELECT 날짜 FROM stock_data ORDER BY 날짜 DESC LIMIT 1\").fetchone()\nif start_date is None:\n    start_date = \"19560303\"\nwith concurrent.futures.ThreadPoolExecutor() as executor:\n    results = list(tqdm(executor.map(process_ticker, tickers, [start_date] * len(tickers), [end_date] * len(tickers)), total=len(tickers)))\nfor df in results:\n    if df is not None:\n        df.to_sql(\"stock_data\", conn, if_exists=\"append\", index=False)\nconn.commit()\nconn.close()",
        "detail": "collector_multi",
        "documentation": {}
    },
    {
        "label": "tickers",
        "kind": 5,
        "importPath": "krx",
        "description": "krx",
        "peekOfCode": "tickers = stock.get_market_ticker_list(market=\"ALL\")\nstart_date = \"20190101\"\nend_date = datetime.datetime.now().strftime(\"%Y%m%d\")\nbar = tqdm(tickers)\n# 2. 종목별 주가(시가, 고가, 저가, 종가, 거래량) 조회\nfor ticker in bar:\n    price = stock.get_market_ohlcv_by_date(start_date, end_date, ticker)\n    value = stock.get_market_fundamental(start_date,end_date,ticker)\n    trading = stock.get_market_trading_value_by_date(start_date, end_date, ticker)\n    totalprice = stock.get_market_cap(start_date, end_date, ticker)",
        "detail": "krx",
        "documentation": {}
    },
    {
        "label": "start_date",
        "kind": 5,
        "importPath": "krx",
        "description": "krx",
        "peekOfCode": "start_date = \"20190101\"\nend_date = datetime.datetime.now().strftime(\"%Y%m%d\")\nbar = tqdm(tickers)\n# 2. 종목별 주가(시가, 고가, 저가, 종가, 거래량) 조회\nfor ticker in bar:\n    price = stock.get_market_ohlcv_by_date(start_date, end_date, ticker)\n    value = stock.get_market_fundamental(start_date,end_date,ticker)\n    trading = stock.get_market_trading_value_by_date(start_date, end_date, ticker)\n    totalprice = stock.get_market_cap(start_date, end_date, ticker)\n    foreign = stock.get_exhaustion_rates_of_foreign_investment(start_date, end_date, ticker)",
        "detail": "krx",
        "documentation": {}
    },
    {
        "label": "end_date",
        "kind": 5,
        "importPath": "krx",
        "description": "krx",
        "peekOfCode": "end_date = datetime.datetime.now().strftime(\"%Y%m%d\")\nbar = tqdm(tickers)\n# 2. 종목별 주가(시가, 고가, 저가, 종가, 거래량) 조회\nfor ticker in bar:\n    price = stock.get_market_ohlcv_by_date(start_date, end_date, ticker)\n    value = stock.get_market_fundamental(start_date,end_date,ticker)\n    trading = stock.get_market_trading_value_by_date(start_date, end_date, ticker)\n    totalprice = stock.get_market_cap(start_date, end_date, ticker)\n    foreign = stock.get_exhaustion_rates_of_foreign_investment(start_date, end_date, ticker)\n    df = pd.concat([price, value, trading, totalprice, foreign],axis=1)",
        "detail": "krx",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 5,
        "importPath": "krx",
        "description": "krx",
        "peekOfCode": "bar = tqdm(tickers)\n# 2. 종목별 주가(시가, 고가, 저가, 종가, 거래량) 조회\nfor ticker in bar:\n    price = stock.get_market_ohlcv_by_date(start_date, end_date, ticker)\n    value = stock.get_market_fundamental(start_date,end_date,ticker)\n    trading = stock.get_market_trading_value_by_date(start_date, end_date, ticker)\n    totalprice = stock.get_market_cap(start_date, end_date, ticker)\n    foreign = stock.get_exhaustion_rates_of_foreign_investment(start_date, end_date, ticker)\n    df = pd.concat([price, value, trading, totalprice, foreign],axis=1)\n    df.to_csv(\"./data/{}.csv\".format(ticker))",
        "detail": "krx",
        "documentation": {}
    }
]